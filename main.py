# Mongo1C by hack0#5784
import pymongo
from tkinter import messagebox
from tkinter import *
from tkinter.ttk import Combobox


def add():
    def addquit():
        if messagebox.askyesno("Mongo1C", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
            addwindow.destroy()
        else:
            pass
    def insert():
        user = {}
        user['type'] = str(addtype.get())
        user['name'] = str(addname.get())
        user['amount'] = str(addspin.get())
        user['company'] = str(addcompany.get())
        try:
            collections.insert_one(user)
            messagebox.showinfo("Mongo1C", "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
            addwindow.destroy()
        except Exception as e:
            messagebox.showerror("Mongo1C", e)
    addwindow = Toplevel(root)
    addwindow.title("Mongo1C –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    addwindow.protocol("WM_DELETE_WINDOW", addquit)
    Label(addwindow, text="–¢–∏–ø:").grid(row=0, column=0)
    Label(addwindow, text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:").grid(row=0, column=1)
    Label(addwindow, text="–ö–æ–ª-–≤–æ:").grid(row=0, column=2)
    Label(addwindow, text="–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ:").grid(row=0, column=3)
    addtype = Combobox(addwindow)
    addtype['values'] = ("–ü—Ä–æ–¥–∞–∂–∞", "–ü–æ—Å—Ç–∞–≤–∫–∞")
    addtype.current(1)
    addtype.grid(row=1, column=0)
    addname = Entry(addwindow, width=10)
    addname.grid(row=1, column=1)
    addvar = IntVar()
    addvar.set(1)
    addspin = Spinbox(addwindow, from_=0, to=100, width=2, textvariable=addvar)
    addspin.grid(row=1, column=2)
    addcompany = Entry(addwindow, width=20)
    addcompany.grid(row=1, column=3)
    addbtn = Button(addwindow, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=insert)
    addbtn.grid(row=0, column=4)



def rem():
    def delete():
        user = {}
        user['id'] = str(e.get())
        try:
            collections.delete_one(user)
            messagebox.showinfo("Mongo1C", "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω!")
            remwindow.destroy()
        except Exception as ex:
            messagebox.showerror("Mongo1C", ex)
    remwindow = Toplevel(root)
    Label(remwindow, text="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:").pack()
    e = Entry(remwindow, width=20)
    e.pack()
    Button(remwindow, text="–£–¥–∞–ª–∏—Ç—å", command=delete).pack()


def edit():
    def continue_():
        def continue__():
            new = {}
            new['type'] = str(addtype.get())
            new['name'] = str(addname.get())
            new['amount'] = str(addspin.get())
            new['company'] = str(addcompany.get())
            user = {}
            for users in collections.find({}):
                if product['name'] == users['name']:
                    user['type'] = users['type']
                    user['name'] = users['name']
                    user['amount'] = users['amount']
                    user['company'] = users['company']
            collections.update_one(user, {"$set": new})


        contwindow = Toplevel(editwindow)


        Label(contwindow, text="–¢–∏–ø:").grid(row=0, column=0)
        Label(contwindow, text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:").grid(row=0, column=1)
        Label(contwindow, text="–ö–æ–ª-–≤–æ:").grid(row=0, column=2)
        Label(contwindow, text="–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ:").grid(row=0, column=3)
        addtype = Combobox(contwindow)
        addtype['values'] = ("–ü—Ä–æ–¥–∞–∂–∞", "–ü–æ—Å—Ç–∞–≤–∫–∞")
        addtype.current(1)
        addtype.grid(row=1, column=0)
        addname = Entry(contwindow, width=10)
        addname.grid(row=1, column=1)
        addvar = IntVar()
        addvar.set(1)
        addspin = Spinbox(contwindow, from_=0, to=100, width=2, textvariable=addvar)
        addspin.grid(row=1, column=2)
        addcompany = Entry(contwindow, width=20)
        addcompany.grid(row=1, column=3)
        addbtn = Button(contwindow, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=continue__)
        addbtn.grid(row=0, column=4)


        product = {}
        product["name"] = enter1
        old_product = {}
        for users in collections.find({}):
            if product["name"] == users["name"]:
                for i in types:
                    old_product[i] = users[i]
                break
        if str(old_product["type"]) == "–ü—Ä–æ–¥–∞–∂–∞":
            addtype.current(1)
        else:
            addtype.current(2)
        addname.insert(str(old_product["name"]))
        addvar.set(int(old_product["amount"]))


    editwindow = Toplevel(root)
    Label(editwindow, text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞").grid(row=0, column=0)
    enter1 = Entry(editwindow, width=20)
    enter1.grid(row=0, column=1)
    btn1 = Button(editwindow, text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", fg="green", command=continue_)
    btn1.grid(row=0, column=2)


def search():
    def products():
        productsroot = Toplevel(chooseroot)
        for user in collections.find({}):
            txt = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {}. –¢–∏–ø: {}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}, –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {}.".format(user['id'], user["type"], user["name"], user["amount"], user["company"])
            Label(productsroot, text=txt).pack()


    def postavki():
        productsroot = Toplevel(chooseroot)
        for user in collections.find({}):
            if user['type'] == '–ü–æ—Å—Ç–∞–≤–∫–∞':
                txt = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}, –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {}.".format(user['id'], user["name"], user["amount"], user["company"])
                Label(productsroot, text=txt).pack()


    def prodaji():
        productsroot = Toplevel(chooseroot)
        for user in collections.find({}):
            if user['type'] == "–ü—Ä–æ–¥–∞–∂–∞":
                txt = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}, –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {}.".format(user['id'], user["name"], user["amount"], user["company"])
                Label(productsroot, text=txt).pack()


    def companies():
        def com():
            companiesroot = Toplevel(comroot)
            for user in collections.find({}):
                if user['company'] == e.get():
                    txt = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {}. –¢–∏–ø: {}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}, –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {}.".format(user['id'], user["type"],
                                                                                               user["name"],
                                                                                               user["amount"],
                                                                                               user["company"])
                    Label(companiesroot, text=txt).pack()



        comroot = Toplevel(chooseroot)
        Label(comroot, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏").pack()
        e = Entry(comroot, width=10)
        e.pack()
        Button(comroot, text="–ü–æ–∏—Å–∫", command=com).pack()


    def searchproduct():
        def s():
            sroot = Toplevel(eroot)
            for user in collections.find({}):
                if user['name'] == ee.get():
                    txt = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {}. –¢–∏–ø: {}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}, –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {}.".format(user['id'], user["type"],
                                                                                               user["name"],
                                                                                               user["amount"],
                                                                                               user["company"])
                    Label(sroot, text=txt).pack()

        eroot = Toplevel(chooseroot)
        Label(eroot, text="–í–≤–µ–¥–∏—Ç–µ –ò–î —Ç–æ–≤–∞—Ä–∞").pack()
        ee = Entry(eroot, width=10)
        ee.pack()
        Button(eroot, text="–ü–æ–∏—Å–∫", command=s).pack()


    chooseroot = Toplevel(root)
    Button(chooseroot, text="–û—Ç—á—ë—Ç –ø–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é", command=companies).pack()
    Button(chooseroot, text="–û—Ç—á—ë—Ç –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É", command=searchproduct).pack()
    Button(chooseroot, text="–û—Ç—á—ë—Ç –ø–æ –±–∞–∑–µ", command=products).pack()
    Button(chooseroot, text="–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", command=prodaji).pack()
    Button(chooseroot, text="–û—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º", command=postavki).pack()



def settings():
    def close():
        global mongourl
        mongourl = settingsurl.get()
        settingswindow.destroy()

    settingswindow = Toplevel(root)
    settingswindow.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Mongo1C")
    settingswindow.protocol("WM_DELETE_WINDOW", close)
    settingsurl = Entry(settingswindow, width=15)
    settingsurl.insert(0, "localhost:27017")
    txt1 = Label(settingswindow, text="MongoDB Cluster URL")
    txt1.pack()
    settingsurl.pack()


#def ids():


def main():
    global root
    global collections
    global mongourl
    global types
    global ids


    root = Tk()
    root.title("Mongo 1C")
    root['bg'] = 'gray22'
#    root.state('zoomed')


    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...
    types = ["type", "name", "amount", "company"]


    # –ö–Ω–æ–ø–∫–∏ –∏ —Ç.–¥.
    Button(root, text="+", fg="green", font="Arial 15", command=add).grid(column=0, row=0)
    Button(root, text="-", fg="red", font="Arial 15", command=rem).grid(column=1, row=0)
    Button(root, text="üõ†", fg="gray", font="Arial 15", command=edit).grid(column=2, row=0)
    Button(root, text="üîç", fg="black", font="Arial 15", command=search).grid(column=3, row=0)
    Button(root, text="‚öô", fg="black", font="Arial 15", command=settings).grid(column=4, row=0)


    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    mongourl = "localhost:27017"
    collections = pymongo.MongoClient(mongourl)["Mongo1C"]["Mongo1C Premium"]
    coll = pymongo.MongoClient(mongourl)["Mongo1C"]["Mongo1C Data"]
    #if coll.find({}) != {}:
    #    ids = coll.find({})[0]['ids']


    root.mainloop()


if __name__ == '__main__':
    main()
